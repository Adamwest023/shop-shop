{"version":3,"sources":["assets/spinner.gif","utils/auth.js","components/ProductItem/index.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/queries.js","utils/helpers.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Nav","className","to","role","aria-label","Auth","loggedIn","href","onClick","logout","reducer","state","action","type","products","cartOpen","cart","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductList","useQuery","loading","data","useEffect","forEach","then","category","ProductItem","key","image","name","price","quantity","src","spinner","alt","CategoryMenu","categoryData","item","id","CartItem","placeholder","onChange","target","parseInt","removeFromCart","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","find","indexedProducts","description","itemInCart","cartItem","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.11b0ed6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import { useReducer } from \"react\";\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity\n          }\n          return product\n        })\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState)\n}","//with these three actions, we're defining how three parts of our state will be maintained and updated\n//UPDATE_PRODUCTS is used by the ProductList component\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\n//connecting peice of data for the previous two actions\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART \";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from \"./reducers\";\n\n//instantiate the global state object\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\n//instantiate our initial global state with the useProductReducer\n//Because that wraps around the useReducer hook from react, every time we run \n//useProductReducer, we receive :\n//state: the most up-to-date version of our global state object\n//dispatch: the method we execute to update our state, it looks for an action object to be passed in as it's arguement \nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        cart: [],\n        cartOpen: false,\n        categories: [],\n        currentCategory: '',\n    });\n    //use this to confirm it works!\n    //return the component with our state object and dispatch the function provided as data for the value prop\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\n//create custom function using hook to be used by the components\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext};","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\nquery getCheckout($products: [ID]!) {\n  checkout(products: $products) {\n    session\n  }\n}\n`;\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\n","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n};\n\n//create IndexedDB helper function that opens the database connection\n//when we call this function we'll open the connection to the DB then connect to the object store that we pass in as storeName\n//then we'll preform a transaction, using the method and object values to carry it out\n//We also wrap the whole thing in a promise, making it a lot easier to work with \nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    //open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n    \n    // create variables to hold reference to the database, transaction (tx), and the object store\n    let db, tx, store;\n\n    //if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      //create object store for each type of data and set \"primary\"\n      db.createObjectStore('products', {keyPath: '_id'});\n      db.createObjectStore('categories', {keyPath: '_id'});\n      db.createObjectStore('cart', {keyPath: '_id'});\n    };\n\n    //handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e){\n      //save a reference of the database to the `db` variable \n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of our object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      //save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      //if there's any errors, let us know \n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      //check which value we passed into the function as a method and preform that method on the object store\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}","import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(()=> {\n        async function saveOrder(){\n\n        const cart = await idbPromise('cart','get');\n        const products = cart.map((item) => item._id);\n        if (products.length) {\n            const {data} = await addOrder({variables: {products}});\n            const productData = data.addOrder.products;\n\n            productData.forEach((item) => {\n                idbPromise('cart','delete',item);\n            });\n        }\n        setTimeout(() => {\n            window.location.assign('/');\n        }, 3000);\n    }\n    saveOrder();\n    }, [addOrder]);\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\n// import { Provider } from 'react-redux';\n// import store from './utils/store';\n\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/success\" component={Success} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route component={NoMatch} />\n          </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}